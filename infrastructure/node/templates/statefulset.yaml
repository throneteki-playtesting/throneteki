apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: node
    # prettier-ignore
    namespace: {{ .Values.namespace }}
spec:
    serviceName: node
    # prettier-ignore
    replicas: {{ .Values.replicaCount }}
    # Rolling update strategy: create new pods before terminating old ones
    updateStrategy:
        type: RollingUpdate
        rollingUpdate:
            partition: 0
    podManagementPolicy: Parallel
    selector:
        matchLabels:
            app: game-node
    template:
        metadata:
            labels:
                app: game-node
            annotations:
                #prettier-ignore
                checksum/secret: {{ .Values.nodeConfig | toJson | sha256sum }}
                #prettier-ignore
                checksum/image: {{ .Values.image.tag | sha256sum }}
                #prettier-ignore
                deployTime: {{ .Values.deployTime | default "0" | quote }}
        spec:
            # Extended grace period to allow games to finish (2 hours)
            terminationGracePeriodSeconds: 7200
            containers:
                - name: throneteki-node
                  image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
                  imagePullPolicy: Always
                  command: ['/bin/sh']
                  args:
                      - -c
                      - |
                          export SERVER=$(echo $POD_NAME | sed 's/-//')
                          exec node /app/node/server/gamenode/index.js
                  ports:
                      - containerPort: 80
                        name: http
                      - containerPort: 9000
                        name: health
                  env:
                      - name: NODE_ENV
                        value: 'production'
                      - name: POD_NAME
                        valueFrom:
                            fieldRef:
                                fieldPath: metadata.name
                      - name: NODE_CONFIG
                        valueFrom:
                            secretKeyRef:
                                name: throneteki-node-secret
                                key: node_config
                  # Readiness probe: pod becomes "not ready" when draining (stops receiving new games)
                  readinessProbe:
                      httpGet:
                          path: /health/ready
                          port: 9000
                      initialDelaySeconds: 10
                      periodSeconds: 5
                      failureThreshold: 1
                      # Don't fail on startup if endpoint doesn't exist (backwards compatibility)
                      successThreshold: 1
                  # Liveness probe: pod is killed if it becomes unresponsive
                  livenessProbe:
                      httpGet:
                          path: /health/alive
                          port: 9000
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      failureThreshold: 3
                  # PreStop hook: wait for games to finish before shutdown
                  lifecycle:
                      preStop:
                          exec:
                              command:
                                  - /bin/sh
                                  - -c
                                  - |
                                      # Signal the node to stop accepting new games
                                      touch /tmp/draining

                                      # Check if health endpoint exists (for backwards compatibility)
                                      if ! wget -q --spider http://localhost:9000/health/games 2>/dev/null; then
                                        echo "Health endpoint not available (old version). Waiting 30 seconds then exiting."
                                        sleep 30
                                        exit 0
                                      fi

                                      # Wait for all games to finish (check every 10 seconds)
                                      # Maximum wait: 90 minutes (540 checks)
                                      MAX_WAIT=540
                                      COUNTER=0

                                      while [ $COUNTER -lt $MAX_WAIT ]; do
                                        # Check if health endpoint reports zero games
                                        GAMES=$(wget -q -O- http://localhost:9000/health/games 2>/dev/null || echo "error")
                                        
                                        if [ "$GAMES" = "error" ]; then
                                          echo "Health endpoint failed. Assuming old version, exiting."
                                          exit 0
                                        fi
                                        
                                        # Trim whitespace and check if zero
                                        GAMES=$(echo "$GAMES" | tr -d '[:space:]')
                                        
                                        if [ "$GAMES" = "0" ]; then
                                          echo "All games finished. Shutting down gracefully."
                                          exit 0
                                        fi
                                        
                                        echo "Waiting for $GAMES games to finish... ($COUNTER/$MAX_WAIT)"
                                        sleep 10
                                        COUNTER=$((COUNTER + 1))
                                      done

                                      echo "Maximum wait time (90 minutes) exceeded. Forcing shutdown."
                                      exit 0
